#!/usr/bin/env perl
use Mojolicious::Lite;
use strict;
use DBIx::Custom;
use Validator::Custom;

open (DBCONF,"< app.conf") || die "Error open dbconfig file";
my @appconf=<DBCONF>;
close DBCONF;
chomp @appconf;
our $dbi = DBIx::Custom->connect(
			dsn => $appconf[0],
			user => $appconf[1],
			password => $appconf[2],
			option => {mysql_enable_utf8=>1}
);

$dbi->do('SET NAMES utf8');

get '/checkout' => sub {
	my $self=shift;
	my $cart=$self->session('cart') || undef;
    my @pid = keys %{$cart};
    my $countpid=@pid || 0;
    $self->stash(message => 'Sorry, your cart is empty :(');
    return $self->render('dummy') if $countpid==0 ;
	
	my $pid=' id=';
    $pid=$pid.join(' or id=',@pid); 
    my $result=$dbi->select(
        table => 'product',
        column => ['id','title','price'],
        where => $pid
    );
    $self->stash(
        cart => $cart,
        products => $result->fetch_hash_all
    );
	$self->render('checkout');
};

post '/checkout' => sub {
	my $self = shift;
	my $cart=$self->session('cart');
    my @pid= keys %{$cart};
    my $countpid=@pid || 0;
    $self->stash(message => 'Sorry, your cart is empty :(');
    return $self->render('dummy') if $countpid==0 ;

    my $pid=' id=';
    $pid=$pid.join(' or id=',@pid);
    my $result=$dbi->select(
        table => 'product',
        column => ['id','title','price'],
        where => $pid
    );

	my $vc = Validator::Custom->new;
	my $param = $self->req->params->to_hash;
	my $rule = [
		name => {message => 'Input your name'} => [
			'not_blank'
		],
		tel => {message => 'Input your tel. number'} => [
			'not_blank'
		],
		email => {message => 'Input correct mail'} => [
			'not_blank',{
				'regex' => qr/^.*\@.*\...+/
			}
		],
		delivery_type => [
			'defined'
		],
		address => [
			'not_blank'
		],
		payment_type => [
			'defined'
		],
	];
	my $vresult = $vc->validate($param,$rule);
	if($vresult->is_ok){
		return $self->redirect_to('/thankyou');
	}else{
		$self->stash(
        	cart => $cart,
	        products => $result->fetch_hash_all
	    );
		$self->stash(missing => 1) if $vresult->has_missing;
		$self->stash(messages => $vresult->messages_to_hash) if $vresult->has_invalid;
	}
	$self->render('checkout');
};

get '/thankyou' => sub {
	my $self = shift;
	$self->session(expires => 1);
	$self->stash(
		page_title => 'Thank you',
		page_caption => 'Thank you for order',
		message=>'Thank you for order'
	);
	$self->render('dummy');
};

get '/cart' => sub {
    my $self = shift;
    my $cart = $self->session('cart');
	my @pid = keys %{$cart} if $cart;
	my $countpid=@pid || 0;
	$self->stash(
		page_title => 'Your cart',
		page_caption => 'Your cart',
		message => 'Sorry, your cart is empty :('
	);
	return $self->render('dummy') if $countpid==0 ;

	my $pid=' id=';
	$pid=$pid.join(' or id=',@pid);	
	my $result=$dbi->select(
		table => 'product',
		column => ['id','title','price'],
		where => $pid
	);
    $self->stash(
		cart => $cart,
		products => $result->fetch_hash_all
	);
    $self->render('cart');
};

post '/cart' => sub{
    my $self=shift;
    my $productid=$self->param('id') || 0;
	my $action=$self->param('action');
    my $cart=$self->session('cart');
	if($action eq 'add'){
	    $cart->{$productid}++;
	}elsif($action eq 'remove'){
		$cart->{$productid}-- if $cart->{$productid}>0;
		delete $cart->{$productid} if $cart->{$productid}==0;
	}
	$self->session(cart => $cart);
	my @pid= keys %{$cart};
	my $countpid=@pid || 0;
    $self->stash(message => 'Sorry, your cart is empty :(');
    return $self->render('dummy') if $countpid==0 ;

	my $pid=' id=';
    $pid=$pid.join(' or id=',@pid);
    my $result=$dbi->select(
        table => 'product',
        column => ['id','title','price'],
        where => $pid
    );
    $self->stash(
		products => $result->fetch_hash_all,
		cart => $cart
	);
    $self->render('cart');
};

get '/:catalog' => sub {
	my $self = shift;
	my $caturl=$self->param('catalog');
	my $result=$dbi->select(
		table => 'router_a',
		column => ['product.title','product.url','product.set','product.instore',
			'product.image','product.id','product.price'
		],
		where => {'catalog.url' => $caturl},
		join => [
			'right join catalog on router_a.catid=catalog.id',
			'left join product on router_a.prodid=product.id'
		]
	);
	$self->stash(product => $result->fetch_hash_all);
	$self->render('catalog');
};

get '/:catalog/:product' => sub {
	my $self = shift;
	my $caturl=$self->param('catalog');
	my $produrl=$self->param('product');
	my $result=$dbi->select(
                        table => 'router_a',
                        column => ['product.id','product.title','product.price','product.desc',
									'product.set','product.features','product.image','product.instore'],
                        where => {
									'catalog.url' => $caturl,
									'product.url' => $produrl
								 },
                        join => [
                                 'right join catalog on router_a.catid=catalog.id',
                                 'left join product on router_a.prodid=product.id'
                                ]
                        );
  $self->stash(product => $result->fetch_hash);
  $self->render('product');
};

app->start;
